names(tab1) <- c('A')
### Compute box B
tab2 <- sort(table(target_nonmatches$UPName), decreasing=TRUE)
tab2 <- as.data.frame(tab2)
names(tab2) <- c('B')
### Merge the two tables and re-ordeer columns
tab1 <- cbind(tab1, targets=row.names(tab1));
tab2 <- cbind(tab2, targets=row.names(tab2));
tab <- merge(tab1,tab2, all=TRUE);
#tab <- tab[c('targets','A','B','C','D')];
tab$A <- ifelse(is.na(tab$A), 0, tab$A)
tab$B <- ifelse(is.na(tab$B), 0, tab$B)
### nScreen Matches
nMatches <- length(unique(target_matches$matchname))
tab$C <- nMatches - tab$A
### Compute box D
nNonMatches <- length(unique(target_nonmatches$matchname))
tab$D <- nNonMatches - tab$B
### Verify all cells sum to same amount
tab$AC <- tab$A+tab$C;
tab$BD <- tab$B+tab$D;
tab$AB <- tab$A+tab$B;
tab$CD <- tab$C+tab$D;
tab$N <- tab$A+tab$B+tab$C+tab$D
#####
##### Calculate the ORs for every target effect
#####
for(i in 1:dim(tab)[1]){ # for every target in our table of targets:
# Here, we are constructing the 2x2 matrix for target i. The A,B,C,D columns were calculated earlier
targetmat <- matrix(data = c(tab$A[i], #
tab$B[i], #
tab$C[i], #
tab$D[i]) #
,nrow=2, byrow=TRUE) # fill A then B then C then D (default = A..C..B..D)
#print(i) ;print(enrichmat) # progress printed in console
# perform a two-way fisher test on the 2x2 table
fishertest <- fisher.test(targetmat, or=1, alternative = "two.sided", conf.int=TRUE, B=10000)
# extract the values from our fisher test result
tab$OR[i] <- fishertest$estimate
tab$pval[i] <- fishertest$p.value
tab$LCI[i] <- fishertest$conf.int[[1]] # lower confidence interval
tab$UCI[i] <- fishertest$conf.int[[2]] # upper confidence interval
}
tab$FDR.pval <- p.adjust(tab$pval, method="BH")
tab <- as.data.table(tab)
tab[,Sig:=ifelse(pval<0.05,1,0)] # is the effect significant at p<0.05?
tab[,FDR.sig:=ifelse(FDR.pval<0.05,1,0)] # is the effect significant at p<0.05?
tab <- tab[order(-FDR.sig, pval, FDR.pval)]
kable(tab[Sig==1])
### Poisson regression
library(glmnet)
targ$Adults0 <- ifelse(is.na(targ$Adults),0,targ$Adults)
y <- targ$Adults0
uniquetargets <- unique(targ$UniProt.ID)
x <- list()
adultvec <- unique(targ$Adults0)
for(i in seq_along(unique(targ$Adults0))){
x[[i]] <- as.character(targ[Adults0==adultvec[i]]$UniProt.ID)
}
for(i in seq_along(uniquetargets)){
targ[, eval(paste0('exp_',uniquetargets[i])):=ifelse(uniquetargets[i] %in% sapply(x[Adults0], "["),1,0), by=.(Adults0)]
}
# for(i in seq_along(SigDrugs)){
#   admit.drug.ml[,eval(paste0("Exp_",SigDrugs[i])):=ifelse(SigDrugs[i] %in% med_name_lc, 1, 0), by=.(mrn)]
# }
targ[Adults0==7]
targ[Adults0==7]$UniProt.ID
targ[Adults0==7]$exp_P08908
names(targ)
setkey(targ,DrugBank.ID)
targ <- unique(targ)
dim(targ)
targ$exp_O60939
targ <- data.frame(targ)
exposures <- targ[,14:590]
names(exposures)
cv.glmnet(x=exposures,y=targ$adults0, family="poisson")
targ$Adults0
cv.glmnet(x=exposures,y=targ$Adults0, family="poisson")
exposures
model.matrix(exposures)
matrix(exposures)
head(matrix(exposures)
)
head(as.matrix(exposures))
cv.glmnet(x=as.matrix(exposures),y=targ$Adults0, family="poisson")
### Kipp Johnson
### kipp.johnson@icahn.mssm.edu
### Required packages
rm(list=ls())
library(data.table)
library(knitr) # kable() function
### Read in the required datasets
dname <-  read.csv("~/Projects/GelbRotation/DrugScreen/drug_name.csv")
targets <- read.csv("~/Projects/GelbRotation/DrugScreen/drug_target_uniprot_links.csv")
screen0 <- read.csv("~/Projects/GelbRotation/DrugScreen/FDA_Celine_070715.csv")
#screen0 <- read.csv("~/Projects/GelbRotation/DrugScreen/FDA_Celine_top5.csv")
#screen0 <- read.csv("~/Projects/GelbRotation/DrugScreen/FDA_Celine_gt5.csv")
#screen0 <- read.csv("~/Projects/GelbRotation/DrugScreen/FDA_Celine_gt4.csv")
### Merge datasets, remove unnecessary columns
dname$IUPAC.name <- NULL
dname$SMILES <- NULL
screen <- merge(dname, screen0, by.x='Number', by.y='Drug', all.x=TRUE)
screen$Sylvain <- NULL
# Create a vector 1 if drug was positive in screen, 0 if drug was negative in screen
screen$positive <- ifelse(is.na(screen$Adults), 0, 1)
### Take first word from drug name
# For screen:
medpattern <- '^.\\w*' # Matches the first word in the string
med_results <- regexpr(pattern=medpattern, screen$Name, perl=TRUE) # compute the reg. expressions
mednames <- rep(NA, length(med_results)) # create an empty vector of appropriate length to store matches
screen$Name1w <- regmatches(screen$Name, med_results) # store the matched names in vector
### Manual RegEXP fixes
screen$Name1w[45] <- "Timolol"
screen$Name1w[70] <- "Triprolidine"
screen$Name1w[85] <- "Isoproterenol"
screen$Name1w[92] <- "Tubocuraraine"
screen$Name1w[93] <- "Butaclamol"
screen$Name1w[94] <- "Apomorphine"
screen$Name1w[99] <- "Raclopride"
screen$Name1w[101] <- "Sulpiride"
screen$Name1w[108] <- "Epinephrine"
screen$Name1w[110] <- "Norepinephrine"
screen$Name1w[119] <- "Vitamin A"
screen$Name1w[174] <- "Deprenyl"
screen$Name1w[270] <- "Hydroxycamptothecin"
screen$Name1w[275] <- "Methylsalicylate" # Doesn't match anyway
screen$Name1w[355] <- "Deoxythymidine"
screen$Name1w[362] <- "Aminoglutethimide"
screen$Name1w[363] <- "Aminosalicylic"
screen$Name1w[364] <- "Aminosalicylic"
screen$Name1w[415] <- "Dideoxycytidine"
screen$Name1w[441] <- "Fluorouracil"
screen$Name1w[463] <- "Hydroxyprogesterone"
screen$Name1w[470] <- "Ketoprofen"
screen$Name1w[638] <- "Levothyroxine"
### For target:
med_results <- regexpr(pattern=medpattern, targets$Name, perl=TRUE) # compute the reg. expressions
mednames <- rep(NA, length(med_results)) # create an empty vector of appropriate length to store matches
targets$Name1w <- regmatches(targets$Name, med_results) # store the matched names in vector
# Manual fix
targets[targets$Name=='Vitamin A',]$Name1w <- 'Vitamin A'
### Get a list of all matching drug names in our dataset
all_matches <- vector()
for(i in seq_along(screen$Name1w)){
best_match <- agrep(screen$Name[i], targets$Name, value=TRUE, max.distance=0.10)[1]
if(is.na(best_match)){
best_match <- agrep(screen$Name1w[i], targets$Name1w, value=TRUE, max.distance=0.10)[1]
}
#cat(c(as.character(screen$Name)[i], "\t\t", screen$Name1w[i], "\t",best_match, "\n"))
all_matches[i] <- best_match
}
### How many drugs (in our list of 640) did not match?
length(which(is.na(all_matches)))
screen$matchname <- all_matches
screen <- screen[which(!is.na(screen$matchname)),]
### Merge targets and
targ <- merge(screen, targets, by.x="matchname", by.y="Name")
targ <- merge(screen, targets, by.x="matchname", by.y="Name1w")
targ <- as.data.table(targ)
setkey(targ, matchname, UniProt.Name)
targ <- unique(targ)
target_matches <- subset(targ, positive==1)
target_matches$UPName <- as.character(target_matches$UniProt.Name)
### Sub-table of non-matched drugs in our dataset
target_nonmatches <- subset(targ, positive==0)
target_nonmatches$UPName <- as.character(target_nonmatches$UniProt.Name)
### Construct the following 2x2 table for enrichment
#############################################################
#                                                           #
#                  Drug screen +  Drug screen -             #
#        Target +       a              b                    #
#        Target -       c              d                    #
#                                                           #
#                    OR = (a/c)/(b/d)                       #
#############################################################
### List of match frequencies
tab1 <- sort(table(target_matches$UPName), decreasing=TRUE)
tab1 <- as.data.frame(tab1)
names(tab1) <- c('A')
### Compute box B
tab2 <- sort(table(target_nonmatches$UPName), decreasing=TRUE)
tab2 <- as.data.frame(tab2)
names(tab2) <- c('B')
### Merge the two tables and re-ordeer columns
tab1 <- cbind(tab1, targets=row.names(tab1));
tab2 <- cbind(tab2, targets=row.names(tab2));
tab <- merge(tab1,tab2, all=TRUE);
#tab <- tab[c('targets','A','B','C','D')];
tab$A <- ifelse(is.na(tab$A), 0, tab$A)
tab$B <- ifelse(is.na(tab$B), 0, tab$B)
### nScreen Matches
nMatches <- length(unique(target_matches$matchname))
tab$C <- nMatches - tab$A
### Compute box D
nNonMatches <- length(unique(target_nonmatches$matchname))
tab$D <- nNonMatches - tab$B
### Verify all cells sum to same amount
tab$AC <- tab$A+tab$C;
tab$BD <- tab$B+tab$D;
tab$AB <- tab$A+tab$B;
tab$CD <- tab$C+tab$D;
tab$N <- tab$A+tab$B+tab$C+tab$D
#####
##### Calculate the ORs for every target effect
#####
for(i in 1:dim(tab)[1]){ # for every target in our table of targets:
# Here, we are constructing the 2x2 matrix for target i. The A,B,C,D columns were calculated earlier
targetmat <- matrix(data = c(tab$A[i], #
tab$B[i], #
tab$C[i], #
tab$D[i]) #
,nrow=2, byrow=TRUE) # fill A then B then C then D (default = A..C..B..D)
#print(i) ;print(enrichmat) # progress printed in console
# perform a two-way fisher test on the 2x2 table
fishertest <- fisher.test(targetmat, or=1, alternative = "two.sided", conf.int=TRUE, B=10000)
# extract the values from our fisher test result
tab$OR[i] <- fishertest$estimate
tab$pval[i] <- fishertest$p.value
tab$LCI[i] <- fishertest$conf.int[[1]] # lower confidence interval
tab$UCI[i] <- fishertest$conf.int[[2]] # upper confidence interval
}
tab$FDR.pval <- p.adjust(tab$pval, method="BH")
tab <- as.data.table(tab)
tab[,Sig:=ifelse(pval<0.05,1,0)] # is the effect significant at p<0.05?
tab[,FDR.sig:=ifelse(FDR.pval<0.05,1,0)] # is the effect significant at p<0.05?
tab <- tab[order(-FDR.sig, pval, FDR.pval)]
kable(tab[Sig==1])
### Poisson regression
library(glmnet)
targ$Adults0 <- ifelse(is.na(targ$Adults),0,targ$Adults)
y <- targ$Adults0
uniquetargets <- unique(targ$UniProt.ID)
x <- list()
adultvec <- unique(targ$Adults0)
for(i in seq_along(unique(targ$Adults0))){
x[[i]] <- as.character(targ[Adults0==adultvec[i]]$UniProt.ID)
}
for(i in seq_along(uniquetargets)){
targ[, eval(paste0('exp_',uniquetargets[i])):=ifelse(uniquetargets[i] %in% sapply(x[Adults0], "["),1,0), by=.(Adults0)]
}
# for(i in seq_along(SigDrugs)){
#   admit.drug.ml[,eval(paste0("Exp_",SigDrugs[i])):=ifelse(SigDrugs[i] %in% med_name_lc, 1, 0), by=.(mrn)]
# }
setkey(targ,DrugBank.ID)
targ <- unique(targ)
targ <- data.frame(targ)
exposures <- targ[,14:590]
cv.glmnet(x=as.matrix(exposures),y=targ$Adults0, family="poisson")
model1 <- cv.glmnet(x=as.matrix(exposures),y=targ$Adults0, family="poisson")
names(model1)
model1$nzero
plot(model1)
plot(model1$glmnet.fit
)
model1$glmnet.fit
model1
str(model1)
model1$beta
model1$glmnet.fit$beta
head(model1$glmnet.fit$beta)
(model1$glmnet.fit$beta)[1:3,1:3]
(model1$glmnet.fit$beta)[1:3,1:10]
(model1$glmnet.fit$beta)[1:3,1:15]
model1$glmnet.fit$df
model1$glmnet.fit$a0
coef(cv.fit, s = "lambda.min")
cv.fit <- cv.glmnet(x=as.matrix(exposures),y=targ$Adults0, family="poisson")
coef(cv.fit, s = "lambda.min")
summary(cv.git)
summary(cv.fit)
plot(cv.fit)
coef()
?coef()
coef(cv.fit, s = "lambda.min")
coef(cv.fit, s = "lambda.min")>1
coef(cv.fit, s = "lambda.min")[,1]
coef(cv.fit, s = "lambda.min")[,1]>0
which(coef(cv.fit, s = "lambda.min")[,1]>0)
names(which(coef(cv.fit, s = "lambda.min")[,1]>0))
mod_coef <- names(which(coef(cv.fit, s = "lambda.min")[,1]>0))
names(targ)
head(names(targ))
(names(targ))
(names(targ))[1:20]
targ[Uniprot.ID %in mod_coef]
targ[Uniprot.ID %in% mod_coef]
targ[UniProt.ID %in% mod_coef]
targ['UniProt.ID' %in% mod_coef]
targ$UniProt.ID %in% mod_coef
which(targ$UniProt.ID %in% mod_coef)
strsplit(mod_coef, "_")
strsplit(mod_coef, "_")[2]
strsplit(mod_coef, "_")[,2]
source('~/.active-rstudio-document', echo=TRUE)
t.test(infile3$genomicknowledge~infile3$Q29.1)
summary(aov(infile3$genomicknowledge~infile3$Q29.1))
gen_29.1k <- anova(lm(infile3$genomicknowledge ~ as.factor(infile3$Q29.1)))
gen_29.1
summary(aov(infile3$genomicknowledge~infile3$Q29.1))
summary(aov(infile3$genomicknowledge~as.factor(infile3$Q29.1)))
anova(lm(infile3$genomicknowledge~as.factor(infile3$Q29.1))))
anova(lm(infile3$genomicknowledge~as.factor(infile3$Q29.1)))
anova(lm(infile3$genomicknowledge ~ as.factor(infile3$Q29.1))
)
summary(aov(infile3$genomicknowledge~as.factor(infile3$Q29.1)))
t.test(infile3$genomicknowledge~as.factor(infile3$Q29.1))
table(infile3$Q30.2)
sum(table(infile3$Q30.2))
nMales = table(infile3$Q27)[[1]]
nFemales = table(infile3$Q27)[[2]]
nNoSex = table(infile3$Q27,exclude=NULL)[[3]]
nMS1 = table(infile3$Q28.2)[[1]]
nMS2 = table(infile3$Q28.2)[[2]]
nMS3 = table(infile3$Q28.2)[[3]]
nMS4 = table(infile3$Q28.2)[[4]]
nMSNone = table(infile3$Q28.2,exclude=NULL)[[5]]
nDual = table(infile3$Q29.1)[[1]]
nResearch = table(infile3$Q30.1)[[1]]
demog <-  data.frame(c(nMales,nFemales,nNoSex,nMS1,nMS2,nMS3,nMS4,nMSNone,nDual,nResearch))
colnames(demog) <- "Number of Students"
row.names(demog) <- c("Male","Female","No Sex Given","MS1","MS2","MS3","MS4","No Year Given","Total with Research Interest","Total Dual Degree")
demog <- mutate(demog, PercentTotal = demog[,1] / 212)
kable(demog, digits=2,padding=0)
table(infile3$Q28.2)
table(infile3$Q28.c)
table(infile3$Q28.2c)
65+64+81
10+7+17
table(nDual)
table(infile3$Q29.1)
table(infile3$Q29.1, exclude=NULL)
table(infile3$Q29.1)[[1]]
table(infile3$Q30.1)[[1]]
34/212
nDual
table(infile3$Q29.1)
table(infile3$Q29.1, exclude=NULL)
nDual
nDual = table(infile3$Q29.1, exclude=NULL)[[2:3]]
nDual = 34 #table(infile3$Q29.1, exclude=NULL)[[2:3]]
nResearch = table(infile3$Q30.1)[[1]]
table(infile3$Q30.1)
table(infile3$Q30.2)
sum(table(infile3$Q30.1))
(table(infile3$Q30.1c))
112/212
(table(infile3$Q30.2))
table(infile3$Q30.2)
65+22+13+1 # n clinical
101/212
21+22+2+13+1 # n translational
59/212
6+2+13+1 # n basic
22/212
table(infile3$Q30.2)
table(infile3$Q30.1)
table(infile3$Q30.1c)
65/212
112+65
EBPAS_alpha <- 0.78
#EBPAS_alpha <- alpha(infile3[,c("Q1","Q2","Q4","Q5","Q7","Q8","Q10","Q12")])
openness_alpha <- psych::alpha(infile3[,c("Q1","Q7","Q10","Q12")])
#divergence_alpha <- alpha(infile3[,c("Q2","Q4","Q5","Q8")])
divergence_alpha <- psych::alpha(divergence_corrected)
education_alpha <- psych::alpha(infile3[,c("Q3","Q6","Q9","Q11")])
opennessdivergencealpha <- psych::alpha( data.frame(c( infile3[,c("Q1","Q7","Q10","Q12")], divergence_corrected) ))
EBPASstats <- c(EBPASstats, EBPAS_alpha)
#EBPASstats <- c(EBPASstats, EBPAS_alpha$total[[1]])
opennessstats <- c(opennessstats, openness_alpha$total[[1]])
divergencestats <- c(divergencestats, divergence_alpha$total[[1]])
educationstats <- c(educationstats, education_alpha$total[[1]])
EBPAStable <- t(data.frame(EBPASstats,educationstats, divergencestats, opennessstats))
colnames(EBPAStable)  <- c("N","Mean","SD","Min","Max","Range","Alpha")
rownames(EBPAStable) <- c("EBPAS", "education", "divergence","openness")
kable(EBAPStable)
EBPASstats <- sums(infile3$EBPAS)
opennessstats <- sums(infile3$openness)
divergencestats <- sums(infile3$divergence)
educationstats <- sums(infile3$education)
EBPAStable <- t(data.frame(EBPASstats,educationstats, divergencestats, opennessstats))
colnames(EBPAStable)  <- c("N","Mean","SD","Min","Max","Range","Alpha")
rownames(EBPAStable) <- c("EBPAS", "education", "divergence","openness")
kable(EBAPStable)
EBPASstats <- sums(infile3$EBPAS)
opennessstats <- sums(infile3$openness)
divergencestats <- sums(infile3$divergence)
educationstats <- sums(infile3$education)
EBPAStable <- t(data.frame(EBPASstats,educationstats, divergencestats, opennessstats))
colnames(EBPAStable)  <- c("N","Mean","SD","Min","Max","Range")
rownames(EBPAStable) <- c("EBPAS", "education", "divergence","openness")
kable(EBAPStable)
kable(EBPAStable)
EBPASstats <- sums(infile3$EBPAS)
EBPASstats
?sums
sums <- function(somevector){
n <- length(somevector)
xbar <- mean(somevector)
s <- sd(somevector)
mn <- min(somevector)
mx <- max(somevector)
ran <- mx - mn
return(c(n, xbar, s, mn, mx, ran))
}
nMales = table(infile3$Q27)[[1]]
nFemales = table(infile3$Q27)[[2]]
nNoSex = table(infile3$Q27,exclude=NULL)[[3]]
nMS1 = table(infile3$Q28.2)[[1]]
nMS2 = table(infile3$Q28.2)[[2]]
nMS3 = table(infile3$Q28.2)[[3]]
nMS4 = table(infile3$Q28.2)[[4]]
nMSNone = table(infile3$Q28.2,exclude=NULL)[[5]]
nDual = 34 #table(infile3$Q29.1, exclude=NULL)[[2:3]]
nResearch = table(infile3$Q30.1)[[1]]
demog <-  data.frame(c(nMales,nFemales,nNoSex,nMS1,nMS2,nMS3,nMS4,nMSNone,nDual,nResearch))
colnames(demog) <- "Number of Students"
row.names(demog) <- c("Male","Female","No Sex Given","MS1","MS2","MS3","MS4","No Year Given","Total with Research Interest","Total Dual Degree")
demog <- mutate(demog, PercentTotal = demog[,1] / 212)
kable(demog, digits=2,padding=0)
table(infile3$Q30.2)
65+22+13+1 # n clinical
21+22+2+13+1 # n translational
6+2+13+1 # n basic
EBPASstats <- sums(infile3$EBPAS)
opennessstats <- sums(infile3$openness)
divergencestats <- sums(infile3$divergence)
educationstats <- sums(infile3$education)
EBPAStable <- t(data.frame(EBPASstats,educationstats, divergencestats, opennessstats))
colnames(EBPAStable)  <- c("N","Mean","SD","Min","Max","Range")
rownames(EBPAStable) <- c("EBPAS", "education", "divergence","openness")
kable(EBPAStable)
sums <- function(somevector){
n <- length(somevector)
xbar <- mean(somevector)
s <- sd(somevector)
mn <- min(somevector)
mx <- max(somevector)
ran <- mx - mn
return(c(n, xbar, s, mn, mx, ran))
}
?sums
sums
?length
xbar <- mean(somevector, na.rm=TRUE)
sums <- function(somevector){
n <- length(somevector)
xbar <- mean(somevector, na.rm=TRUE)
s <- sd(somevector, na.rm=TRUE)
mn <- min(somevector, na.rm=TRUE)
mx <- max(somevector, na.rm=TRUE)
ran <- mx - mn
return(c(n, xbar, s, mn, mx, ran))
}
EBPASstats <- sums(infile3$EBPAS)
opennessstats <- sums(infile3$openness)
divergencestats <- sums(infile3$divergence)
educationstats <- sums(infile3$education)
EBPAStable <- t(data.frame(EBPASstats,educationstats, divergencestats, opennessstats))
colnames(EBPAStable)  <- c("N","Mean","SD","Min","Max","Range")
rownames(EBPAStable) <- c("EBPAS", "education", "divergence","openness")
kable(EBPAStable)
psych::alpha(infile3$genomiccomfort)
knowledge_alpha <- psych::alpha(infile3[,c("Q18","Q19","Q20","Q21")])
ability_alpha <-   psych::alpha(infile3[,c("Q22","Q23","Q24","Q25")])
knowledge_alpha; ability_alpha
knowledge_alpha;
ability_alpha
64+17
65+64+81
table(infile3$Q29.1)
table(infile3$Q28.2)
sum(table(infile3$Q28.2))
table(infile3$Q28.2, exclude=NULL)
opennessdivergencealpha <- psych::alpha( data.frame(c( infile3[,c("Q1","Q7","Q10","Q12")], divergence_corrected) ))
openness_alpha <- psych::alpha(infile3[,c("Q1","Q7","Q10","Q12")])
divergence_corrected <- abs(infile3[,c("Q2","Q4","Q5","Q8")] - 6)
opennessdivergencealpha <- psych::alpha( data.frame(c( infile3[,c("Q1","Q7","Q10","Q12")], divergence_corrected) ))
opennessdivergencealpha
ls
source('~/.active-rstudio-document', echo=TRUE)
grid.arrange()
grid.arrange(g2,g3,g4, main='\nI think that it is important to learn about personalized medicine')
g4 <- ggplot(data=infile3, aes(factor(Q30.1.fNA), fill=Q9cf), aes(y=..count../sum(..count..))) +
geom_bar(position="fill", binwidth=0.25 )+
#stat_bin(geom='text', aes(label='99%'), hjust=2 ) +
xlab("Interested in a\nResearch Career") + ylab('Percent') +
scale_fill_discrete(name='Response') + coord_flip() +
guides(fill=guide_legend(reverse=TRUE)) + scale_y_continuous(labels=percent)
g4;
source('~/.active-rstudio-document', echo=TRUE)
dim(infile3)
g1 <- ggplot(data=infile3[!is.na(factor(infile3$Q28.2c)), ], aes(x=factor(Q28.2c), y=genomiccomfort) )
g1 <- g1 + geom_boxplot()
g1 <- g1 + scale_x_discrete(labels=c('MS1','MS2','MS3+'))
g1 <- g1 + ggtitle("Perceived ability to apply genomics to clinical care") + xlab("") + ylab('Cumulative Score')
g1 <- g1 + coord_flip();
g1;
levels(infile3$Q28.2.fNA) <- c('MS1','MS2',"MS3+")
g1 <- ggplot(data=infile3[!is.na(factor(infile3$Q28.2c)), ], aes(x=factor(Q28.2c), y=genomicknowledge) )
g1 <- g1 + geom_boxplot()
g1 <- g1 + scale_x_discrete(labels=c('MS1','MS2','MS3+'))
g1 <- g1 + ggtitle("Perceived knowledge of genomic testing concepts") + xlab("") + ylab('Cumulative Score')
g1 <- g1 + coord_flip();
g1;
178+34
table(infile3$Q30.2)
65+22+13+1 # n clinical
sum(table(infile3$Q30.2))
sum(table(infile3$Q30.1))
table(Q30.1)
table(infile3$Q30.1)
